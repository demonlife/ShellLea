* 使用BASH一行行的读文件
  代码如下：
  <1>:
  i=1
  FILE=sample.txt
  echo "##"
  cat $FILE | while read line; do
  echo "LINE # $i: $line"
  ((i++))
  done
  echo "total number of lines in file: $i"
  <1>代码的问题在于：使用管道命令会发起子shell来读取文件，而任何在子shell中的操作
  都会随着子shell的结束而丢失。
  <2>:
  for fileline in $(cat $FILE); do
  echo $fileline
  done
  <2>的问题在于：for循环默认使用IFS的值来分割,IFS的默认值为空格
  <3>:
  k=1
  while read line; do
  echo "LINE # $k: $line"
  ((k++))
  done < $FILE
  该代码等价于：
  k=1
  < $FILE while read -r line; do
  echo "LINE #$k: $line"
  ((k++))
  done
  但是可能会存在问题：You can't put it in the front because you must put redirections
  at the end of a compound command. You can put them anywhere in a simple command.
  Also it should always be echo "$line" not echo $line because of word splitting
  happening if you don't quote it. I don't get your comment about awk being bogus
  <3>的代码是标准代码，可以一行行很好的读取文件
* Bash One-Liners
  http://www.catonmat.net/blog/bash-one-liners-explained-part-one/
  echo "hello" -n >> file :向file文件追加内容，去掉换行符号
  read -r line < file :获取文件file的第一行数据,-r:makes sure the input is read raw,
  meaning the backslashes won't get escaped
  line=$(head -1 file): 同上
  line=`head -1 file`: 同上，反引号

  shuf不是bash的内建命令
  read -r random_line < <(shuf file): 随机读取file文件中的一行， When bash sees <(shuf file)
  it opens a special file /dev/fd/n, where n is a free file descriptor,
  then runs shuf file with its stdout connected to /dev/fd/n and replaces <(shuf file)
  with /dev/fd/n

  sort -R命令是对文件随机排序
  <(...):是进程替换操作符，进程替换操作会创建一个匿名的管道文件，并将进程命令的标准输出连接到管道的写一端
  read -r random_line < <(sort -R file) :随机获取文件file的一行数据
  read -r random_line <<(sort -R file): 同上
  random_line=$(sort -R file | head -1): 同上
  
  while read -r field1 field2 throwaway; do
  echo $field1, $field2
  done
  其中throwaway会存取后面的所有的内容，thorwaway可以使用_替换, 此时就不能访问了, 其实可以理解为
  最后一个变量会存储所有剩下的数据。

  here-string：
  which lets you pass strings directly to the standard input of commands
  info="20 packets in 10 seconds"
  read packets _ _ time _ <<< "$info"
  
  快速复制一个文件：
  cp /path/to/file{, _copy}
  快速重命名一个文件：
  mv /path/to/file{,_copy}

  获取文件名/文件路径：
  pathname=/path/to/file.txt
  filename=${pathname##*/}
  dirname=${pathname%/*}
  ##/%/#/%%应该单独处理，后面的内容是匹配的正则表达式。

  echo {a..z} :产生字母表
  printf "%c" {a..z}: 产生字母表中间无空格
* Bash 学习
  http://wiki.ubuntu.com.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80
  var=1
  let "var+=1": let表示数学运算
  var="$[$var+1]": $[]将中括号内的内容作为数学运算结果再输出。
  ((var++)): var的值加1
  var=$(($var+1)): 计算var的值
* BASH 保护性编程技巧 
  http://blog.jobbole.com/73257/
  尽量少用全局变量， 并且以大写命名， 只读声明， 用全局变量代替隐晦的$0, $1等
  例如： readonly PROGNAME=$(basename $0)
  
* bash 代码注入的安全漏洞
  http://coolshell.cn/articles/11973.html
  env var='() { :; }; echo bash is vulnerable!' bash -c "echo bash test"
  如果bash有漏洞, 则上述代码会输出"bash is vulnerable!" "bash test"
  原因：当以函数的形式来对环境变量来进行赋值时，会导致函数后面的命令被执行

  env x='() { (a)=>\' sh -c "echo date"; cat echo, 该段代码会生成一个echo文件,
  文件的内容就是date的时间值.
  该命令的详细解释:
  X='() { (a)=>\' 这个不用说了，定义一个X的环境变量。但是这个函数不完整啊,是的,
  这是故意的。另外你一定要注意,\'不是为了单引号的转义，X这个变量的值就是 () { (a)=>\
  其中的 (a)=这个东西目的就是为了让bash的解释器出错（语法错误）
  语法出错后，在缓冲区中就会只剩下了 ">\"这两个字符
  于是，这个神奇的bash会把后面的命令echo date换个行放到这个缓冲区中，然后执行
  相当于在shell 下执行了下面这个命令: >\
  echo date， \是用于命令行上换行的，于是相当于执行了：>echo date
  上述命令就是一个重定向了.

  上述bash漏洞的原理是: 利用bash的环境变量, 来进行注入. 具体步骤如下:
  首先定义一个环境变量, 环境变量中的值就是可以执行的其他命令
