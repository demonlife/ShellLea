* iTerm 终端
** 主题
   github上有一个iTerm的主题repo,
   地址: https://github.com/mbadolato/iTerm2-Color-Schemes
   使用: 将该代码下载到本地文件系统中, 之后运行iterm, 将主题文件导入即可使用
* 技巧
** tree命令的一个等价实现
   find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
   该等价方式的好处是可以显示中文名的文件，但是tree显示中文为乱码
** 给命令绑定一个宏或按键  
   在进行按键绑定的时候，需要首先获取按键对应的字符序列，比如获取F12的字符序列的方法：
   先按下Ctrl+V然后按下F12，就可以得到F12的字符序列，^[[24~
   接着使用bind进行绑定：
   bind '"\e[24~":"date"' #bash 中可以使用该方法
   showkey -a命令也可以显示按键对应的字符序列
** 查看当前系统支持的所有命令列表
   compgen -c # bash可以，zsh不能运行
** 打印目录栈
   目录栈是使用pushd popd来操作，打印可以使用dirs
** 移除正在运行的进程
   linux中可以使用：disown -r
** bash 中的hash命令
   linux命令'hash'管理着一个内置的哈希表, 记录了已执行过的命令的完整路径,
   用该命令可以打印出你所使用过的命令以及执行的次数
* Better Bash scripting in 15 minutes
  http://blog.jobbole.com/65808/
** start every bash script with the following prolog
   #!/bin/bash
   set -o nounset # shorthands set -u
   set -o errexit # shorthands set -e
   this will take care of two very common errors:
   1. referencing undefined variable(which default to "")
   2. ignoring falling commands

   in the “errexit” mode, while a valuable first line of defense,
   does not catch all failures, i.e. under certain circumstances failing commands will go undetected
   see more: https://groups.google.com/forum/?fromgroups#!topic/gnu.bash.bug/-9ySnEo1WrQ
** functions
   Bash lets you define functions which behave like other commands
   <code -- functions>
** variable annotations
   Bash allows for a limited form of variable annotations
   local(for local variables inside a function)
   readonly(for read-only variable)

   Strive to annotate almost all variables in a bash script with either local or readonly
** favor $() over backticks(`)
   $()also permits nesting without the quoting headaches
** favor [[ \]\] over []   
   [[]] avoids problems like unexpected pathname expansion, offers some syntactical improvements,
   and adds new functionality:
   Operator        Meaning
   ||             logical or (double brackets only)
   &&           logical and (double brackets only)
   <            string comparison (no escaping necessary within double brackets)
   -lt          numerical comparison
   =             string matching with globbing
   ==         string matching with globbing (double brackets only, see below)
   =~            string matching with regular expressions (double brackets only , see below)
   -n            string is non-empty        
   -z            string is empty
   -eq           numerical equality
   -ne           numerical inequality
   <code --regular>
** string manipulation   
   bash has a number of ways to mainpulate strings
*** basic
    <code --string>
** avoiding temporary files    
   Some commands expect filenames as parameters  so straightforward pipelining does not work.
   This is where <() operator comes in handy as it takes a command and transforms it into something
   <code -- temporary files>
** Built-In Variables
   For reference
   $0   name of the script
   $n   positional parameters to script/function
   $$   PID of the script
   $!    PID of the last command executed (and run in the background)
   $?   exit status of the last command  (${PIPESTATUS} for pipelined commands)
   $#   number of parameters to script/function
   $@  all parameters to script/function (sees arguments as separate word)
   $*    all parameters to script/function (sees arguments as single word)
   Note
   $*   is rarely the right choice.
   $@  handles empty parameter list and white-space within parameters correctly
   $@ should usually be quoted like so "$@"
** debugging   
   To perform a syntax check/dry run of your bash script run:
   bash -n myscript.sh

   To produce a trace of every command executed run:
   bash -v myscripts.sh

   To produce a trace of the expanded command use:
   bash -x myscript.sh

   -v and -x can also be made permanent by adding
   set -o verbose and set -o xtrace to the script prolog.
   This might be useful if the script is run on a remote machine, e.g.
   a build-bot and you are logging the output for remote inspection.
** Signs you should not be using a bash script
   your script is longer than a few hundred lines of code
   you need data structures beyond simple arrays
   you have a hard time working around quoting issues
   you do a lot of string manipulation
   you do not have much need for invoking other programs or pipe-lining them
   you worry about performance
   Instead consider scripting languages like Python or Ruby.
** lea data
   http://tldp.org/LDP/abs/html/
* 后台任务
** 执行一个后台任务
   可以在需要执行的命令后加上&即可
** 通过ctrl+z和bg命令将当前任务切换到后台
   先使用ctrl+z将当前任务暂停
   执行bg命令将任务切换到后台执行
   使用jobs命令查看所有的后台任务   
** fg命令将后台任务切换到前台
   fg命令不带参数，则将最近的后台任务切换到前台
   如果有多个任务，可以先使用jobs命令列出所有任务号和对应命令
   fg %1将一号任务切换到前台
** 通过kill %结束指定的后台任务   
   假如你想杀死指定的后台任务，用kill %任务号就行了。下面是杀死2号任务的例子
   kill %2
* Shell 远程操作
  ssh user@server bash < /path/to/local/script.sh 在server上使用bash执行/path/to/local/script.sh
  ssh user@server cat /path/to/remote | diff /path/to/localfile -: 比较远程文件和本地文件的差异
  vim scp://username@host/path/to/somefile： vi一个远程文件
  curl ifconfig.me：在内网下查看公网ip
* 其他
  FUNCNAME: 函数名变量，在函数内打印该变量会输出当前的函数名称
* sed 学习
  http://www.ituring.com.cn/article/118056
  http://coolshell.cn/articles/9104.html
** pattern space
   是一个 sed 负责维护的缓冲区，当应用编辑命令时在那里存储单个输入行，并依次执行每一个命令，
   当应用了所有命令后，当前行被输出并把 file(s) 的下一行读入，循环往复。pattern space 中的内容是动态的，
   任何命令都可以为应用下一个命令而改变 pattern space 的内容。一些命令会改变 sed 的工作流程
** hold space
** 命令格式
   sed [options] 'program' files(s)
   sed [options] -f sed_script file(s)
*** 命令格式详情
    address{
    program1
    program2
    ...
    }
    address2{
    program3
    program4
    ...
    }
    [address1,[address2]][!]program1/program2/.../
    需要将program顶到一行的开头写，否则会出现错误
    address不是必须要指定的，不指定就会在每一行上执行sed_script
    address 后紧跟!匹配非address的行。
    ===== address 详细说明
    number：只匹配特定行
    first~step:匹配已first行起始，step会递增量的address，如果first为0，sed就会以为从第step行递增。gnu扩展
    $：匹配文件最后一行
    /regexp/：正则匹配, \<表示词首, abc\>表示以abc结尾的词
    \cregexpc：同上c可以为任意字符, 在命令中如果需要使用',则不能在''中转义',因此只能使用双引号,在双引号内可以转义"。
    0，addr2：从files第1行开始，直到匹配到addr2的行，相当于1，addr2。区别是0，addr2会在地址区间结尾，
    1，addr2会在地址区间的起始，只有当addr2是一个正则表达式才有效。(使用0会报错, sed版本是gnu sed 4.2.2 代码如下：
    0, 3{
    s;yes;no;
    }
    )
    addr1,+N：匹配从addr1行开始，直到下面的N行
    addr1, ~N：匹配从addr1开始，直到为N的倍数行(？通过测试为等价于：1,N)
    ===== options 详细说明
    -n, -- quite, --slient：阻止默认输出，通常和p一起使用，只输出pattern space中改变的行
    -e 'program', --expression='program': 如果有多个program可以指定多个-e选项
    -f sed_script, --files=sed_script
    --follow-symlinks: 处理符号链接
    -i[SUFFIX], --in-place=[SUFFIX]：对file进行更改，如果提供了suffix，则先对源文件进行备份
    -l N, --line-length=N:指定自动换行的字符数
    --posix:禁用所有的gnu sed扩展
    -r,--regexp-extend:使用ere，posix只能使用bre
    -s，--separate:将files视为单个独立的文件，而不是将他们视为连续的字符流。
    -u，--unbuffered，从files中加载尽可能少量的数据并且更频繁的flush
**** 命令
     [address[,address2]]s/pattern/replacement/flag
     用replacement替代每一个寻址行的pattern
     flag(通常组合使用)
     n：1~512的一个数字，表示对匹配模式的每行中第n次出现的情况进行替换,默认为第一次
     g：全局替换
     p：打印pattern space内容
     w file：将pattern space的内容写入到文件file中。
     replacement：
     &：用正则表达式匹配的内容进行替换
     \n：匹配第n个分组子串
     \：转义符号，也可以创建多行replacement字符串
     sed会记住最后一个正则表达式，
     sed 's/foo/bar/3' #替换第3个foo
     sed 's//quux/' #替换第一个foo
     #：注释命令
     d：删除命令， [address1[,address2]]d
     D：多行删除命令， [address1[,address2]]D
     a：追加命令, [address1[,address2]]a
     i：插入命令，[address1[,address2]]i
     c：更改命令，[address2[,address2]]c
     l：列表命令,[address1[,address2]]l,列出space pattern中的内容， 将不可打印字符表示为ascii码，长的将被折行
     l width：列表命令，gnu扩展，同上，长的行以width规定的字符数折行。
     y：转换命令，[address1[,address2]]y/abc/xyz:按位置将字符串abc中的字符转换成字符串xyz的相应位置
     替换根据字符的位置来进行。该替换没有‘词’的概念，只要遇到一个符合的字符就进行替换。
     p：打印命令，会导致重复的输出，指定-n option则可以避免重复输出
     =:打印行号
     n：首先输出patter space的内容，然后读取下一行，继续执行sed_script中余下的program
*** 标签命令(:lable)
    [address]b[mylable]
    如果没有指定mylable，则跳转到sed_script结尾，否则无条件跳转到mylable处
    :top
    cmd1
    cmd2
    /pattern/b top
    cmd3
** 知识点
   sed处理文本的伪代码
   foreach line in file {
   patter_space <= line # 将每一行放入patter space中
   patter_space <= exec(sed_cmd, patter_space) # 处理patter space中的行，然后继续放入patter space中

   # 如果没有指定-n，则打印改行
   if (sed option hasn't "-n") {
   print patter_space
   }
*** address
    几乎所有的命令格式是
    [address[,address]][!]{cmd}
    address可以是一个数字，也可以是一个模式，可以通过逗号分隔两个address
    执行cmd的伪代码如下：
    bool bexec = false
    foreach line in file {
    if (match(address1)) {
    bexec = true
    }
    if (bexec == true) {
    exec(sed_cmd)
    }
    if (match(address2)) {
    bexec = false;
    }
    }
    address可以使用相对位置
    sed '/dog/, +3s/^/# /g' #在dog的连续3行进行操作
*** 命令打包
    cmd可以是多个，可以用分号分开，可以用大括号括起来作为嵌套命令
    sed '3, 6 {/this/{/fish/d}}' pets.txt #对3,6行，匹配this成功后在匹配fish,成功后执行d命令
*** hold space
    g: 将hold space的内容拷贝到patter space，原来patter space的内容清除
    G: 将hold space的内容append到patter space\n后
    h:将patter space的内容拷贝到hold space中，清除原hold space的内容
    H:将patter space的内容append到hold space\n后
    x:交换pattern space和hold space的内容
    
* awk 学习
  http://coolshell.cn/articles/9070.html
  awk '{xxx}' filename
  其中单引号中被大扩号包括着的就是awk的语句，其只能被单引号包含。
  例如：
  awk '{print $1, $4}' file# 其中的$1...$n表示第几列，$0:表示整个行
  awk饿格式化输出与Ｃ语言的printf没什么大的区别
  awk '{printf "%-8s %-8s\n", $1, $2}' filename
** 过滤记录
   awk '$3 == 0 && $6 == "LISTEN"' filename # 第3列值为0并且第6列值为LISTEN
   可以使用的运算符号有，!=, >, < >=, <=
   如果需要表头的话， 可以引入内建变量NR
   awk '$3 == 0 && $6=="LISTEN" || NR == 1' filename
*** 内建变量
    $0:当前记录，存放这整个行的内容
    $1~$n:当前记录的第n个字段，由FS分割
    FS：输入字段分隔符，默认是空格或tab
    NF：当前记录中的字段个数，即多少列
    NR：已经读出的记录数，即行号，从1开始，如果有多个文件，该值会不断累加。
    FNR：当前记录数，与NR不同的是，这个值是各个文件自己的行号
    RS:输入的记录分割符，默认为换行符
    OFS：输出字段分隔符，默认是空格
    ORS：输出的记录分割符，默认为换行符
    FILENAME：当前输入文件的名字
*** 指定分隔符
    awk 'BEGIN{FS=":"} {print $1, $3}' filename
    等价于：awk -F: '{print $1, $3}' filename
    如果需要指定多个分隔符可以使用如下语句：
    awk -F '[;:]'
*** 字符匹配
    awk '$6 ~ /FIN/ || NR == 1 {print $1}' filename
    匹配FIN，~表示模式开始，//中是模式，即一个正则表达式
    awk '$6 !~ /FIN/{print $1}' filename
    模式取反，等价于：awk '!/FIN/' filename
*** 拆分文件
    awk使用重定向就可以拆分文件，
    awk 'NR!=1{print > $6}' filename, 以第6列为文件名命名文件(所有行都写入)
    awk 'NR!=1{print $1, $2 > $6}' filename, 将第1,2列数据写入$6表示的文件中
    复杂一点的语句：
    awk 'NR!=1 {if ($6 ~ /TIME|ESTABLISHED/) print > "1.txt";
    else if ($6 ~/LISTEN/) print > "2.txt";
    else print > "3.txt" }' filename
*** awk 脚本
    语法：
    BEGIN{这里放的是执行前的语句}
    END{这里放的是处理完所有的行后要执行的语句}
    {这里放的是处理每一行时要执行的语句}
*** 与环境变量的交互
    使用-v参数和ENVIRON，使用ENVIRON的环境变量需要export
    x=5
    y=10
    export y
    awk -v val=$x '{print $1, $4+val, $5+ENVIRON["y"]}' OFS="\t" filename
*** 几个小技巧
    awk 'length>80' file #从file中找出长度大于80的行
    
    
* grep 命令
  grep --exclude-dir=/path:查找时排除某个路径
